# Deployment IaC with terraform

name: $(BuildDefinitionName)_$(date:yyyyMMdd)$(rev:.r)

variables:
  terraformVersion: 1.5.4

# Only run against develop
trigger: main

stages :
  - stage: validate
    jobs:
      - job: validate
        continueOnError: false
        steps:
          - task: TerraformInstaller@0
            displayName: 'install'
            inputs:
              terraformVersion: '$(terraformVersion)'
          - task: TerraformTaskV1@0
            displayName: 'init'
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: 'test'
              backendAzureRmResourceGroupName: 'test_state'
              backendAzureRmStorageAccountName: 'tf_test_devops'
              backendAzureRmContainerName: 'azure_test_devops'
              backendAzureRmKey: 'tf_test_devops.tfstate'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/'
          - task: TerraformTaskV1@0
            displayName: 'validate'
            inputs:
              provider: 'azurerm'
              command: 'validate'

  - stage: plan
    dependsOn: [validate]
    condition: succeeded('validate')
    jobs:
      - job: terraform_plan_develop
        steps:
          - checkout: self
          - task: TerraformInstaller@0
            displayName: 'install'
            inputs:
              terraformVersion: '$(terraformVersion)'
          - task: TerraformTaskV1@0
            displayName: 'init'
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: 'test'
              backendAzureRmResourceGroupName: 'test_states'
              backendAzureRmStorageAccountName: 'tf_test_devops'
              backendAzureRmContainerName: 'azure_test_devops'
              backendAzureRmKey: 'tf_test_devops.tfstate'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/'
          - task: TerraformTaskV1@0
            displayName: 'plan'
            inputs:
              provider: 'azurerm'
              command: 'plan'
              commandOptions: '-input=false -var-file="../vars/$(Environment)/$(Environment).tfvars"'
              environmentServiceNameAzureRM: 'test'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/'

  - stage: apply
    dependsOn: [plan]
    condition: succeeded('plan')
    jobs:
      - job: terraform_apply_develop
        steps:
          - checkout: self
          - task: TerraformInstaller@0
            displayName: 'install'
            inputs:
              terraformVersion: '$(terraformVersion)'
          - task: TerraformTaskV1@0
            displayName: 'init'
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: 'test'
              backendAzureRmResourceGroupName: 'test_states'
              backendAzureRmStorageAccountName: 'tf_test_devops'
              backendAzureRmContainerName: 'azure_test_devops'
              backendAzureRmKey: 'tf_test_devops.tfstate'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/'
          - task: TerraformTaskV1@0
            displayName: 'plan'
            inputs:
              provider: 'azurerm'
              command: 'plan'
              commandOptions: '-input=false -var-file="../vars/$(Environment)/$(Environment).tfvars"'
              environmentServiceNameAzureRM: 'test'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/'
          - task: TerraformTaskV1@0
            displayName: 'apply'
            inputs:
              provider: 'azurerm'
              command: 'apply'
              commandOptions: '-input=false -auto-approve -var-file="../vars/$(Environment)/$(Environment).tfvars"'
              environmentServiceNameAzureRM: 'test'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/'